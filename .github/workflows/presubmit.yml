name: Presubmit
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  format:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-format-18
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check format
        run: |
          git-clang-format --binary clang-format-18 --diff origin/main --extensions cpp,hpp,c,cl > output.txt
          cat output.txt
          grep -E "(no modified files to format|clang-format did not modify any files)" output.txt
  build-android:
    name: Android Build
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clone dependencies
        run: |
          git clone --depth 1 --branch v51.2 https://github.com/google/perfetto third_party/perfetto
          git clone --depth 1 --branch v2024.05.08 https://github.com/KhronosGroup/OpenCL-Headers.git third_party/opencl-headers
      - name: Download and extract Android NDK
        run: |
          mkdir ndk
          wget https://dl.google.com/android/repository/android-ndk-r27d-linux.zip -O ndk/android-ndk.zip
          unzip ndk/android-ndk.zip -d ndk/
          rm ndk/android-ndk.zip
          ls -l ndk/
      - name: Build
        shell: bash
        run: |
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE="ndk/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI="arm64-v8a" \
            -DANDROID_PLATFORM="35" \
            -DPERFETTO_SDK_PATH="third_party/perfetto/sdk" \
            -DOPENCL_HEADER_PATH="third_party/opencl-headers" \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build
  build-macos:
    name: MacOS Build
    needs: format
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clone dependencies
        run: |
          git clone --depth 1 --branch v51.2 https://github.com/google/perfetto third_party/perfetto
          git clone --depth 1 --branch v2024.05.08 https://github.com/KhronosGroup/OpenCL-Headers.git third_party/opencl-headers
      - name: Build
        shell: bash
        run: |
          cmake -B build -S . \
            -DPERFETTO_SDK_PATH="third_party/perfetto/sdk" \
            -DOPENCL_HEADER_PATH="third_party/opencl-headers" \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build
  build-windows:
    name: Windows Build
    needs: format
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clone dependencies
        run: |
          git clone --depth 1 --branch v51.2 https://github.com/google/perfetto third_party/perfetto
          git -C third_party/perfetto apply ../../.github/workflows/perfetto_mingw.patch
          git -C third_party/perfetto apply ../../.github/workflows/header_mingw.patch
          git clone --depth 1 --branch v2024.05.08 https://github.com/KhronosGroup/OpenCL-Headers.git third_party/opencl-headers
      - name: Build
        shell: bash
        run: |
          cmake -B build -S . -G "MinGW Makefiles" \
            -DPERFETTO_SDK_PATH="third_party/perfetto/sdk" \
            -DOPENCL_HEADER_PATH="third_party/opencl-headers" \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build
  build-linux:
    name: Linux Builds & Tests
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build clang-18
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          variant: ccache
          max-size: 2G
      - name: Build Perfetto
        run: |
          git clone --depth 1 --branch v51.2 https://github.com/google/perfetto third_party/perfetto
          $(pwd)/third_party/perfetto/tools/install-build-deps
          $(pwd)/third_party/perfetto/tools/setup_all_configs.py --ccache
          $(pwd)/third_party/perfetto/tools/ninja -C $(pwd)/third_party/perfetto/out/linux_clang_release trace_processor_shell
      - name: Build OpenCL-ICD-Loader
        run: |
          git clone --depth 1 --branch v2024.05.08 https://github.com/KhronosGroup/OpenCL-Headers.git third_party/opencl-headers
          git clone --depth 1 --branch v2024.05.08 https://github.com/KhronosGroup/OpenCL-ICD-Loader.git third_party/opencl-icd-loader
          cmake -B third_party/opencl-icd-loader/build -S third_party/opencl-icd-loader -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DOPENCL_ICD_LOADER_HEADERS_DIR=$(pwd)/third_party/opencl-headers \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_C_COMPILER="$(which clang)"
          cmake --build third_party/opencl-icd-loader/build
      - name: Install pocl dependencies
        run: |
          sudo apt-get install -y python3-dev libpython3-dev build-essential ocl-icd-libopencl1 cmake git pkg-config libclang-18-dev clang-18 llvm-18 make ninja-build ocl-icd-libopencl1 ocl-icd-dev ocl-icd-opencl-dev libhwloc-dev zlib1g zlib1g-dev clinfo dialog apt-utils libxml2-dev libclang-cpp18-dev libclang-cpp18 llvm-18-dev llvm-spirv-18
      - name: Build pocl
        run: |
          git clone --depth 1 --branch v7.0 https://github.com/pocl/pocl.git third_party/pocl
          cmake -B third_party/pocl/build -S third_party/pocl -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/third_party/pocl/install \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_C_COMPILER="$(which clang)"
          cmake --build third_party/pocl/build --target install
      - name: Build SPIRV-Tools
        run: |
          git clone --depth 1 --branch main https://github.com/KhronosGroup/SPIRV-Tools.git third_party/spirv-tools
          git clone --depth 1 --branch main https://github.com/KhronosGroup/SPIRV-Headers.git third_party/spirv-tools/external/spirv-headers
          cmake -B third_party/spirv-tools/build -S third_party/spirv-tools -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/third_party/spirv-tools/install \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_C_COMPILER="$(which clang)" \
            -DSPIRV_SKIP_TESTS=ON
          cmake --build third_party/spirv-tools/build --target install
      - name: Build debug
        run: |
          cmake -B build_debug -S . -G Ninja \
            -DPERFETTO_SDK_PATH="${{ github.workspace }}/third_party/perfetto/sdk/" \
            -DOPENCL_HEADER_PATH="$(pwd)/third_party/opencl-headers" \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_BUILD_TYPE=Debug
          cmake --build build_debug
      - name: Build release
        run: |
          cmake -B build_release -S . -G Ninja \
            -DPERFETTO_SDK_PATH="${{ github.workspace }}/third_party/perfetto/sdk/" \
            -DOPENCL_HEADER_PATH="$(pwd)/third_party/opencl-headers" \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_C_COMPILER="$(which clang)" \
            -DCLKP_BUILD_TESTS=1 \
            -DCMAKE_BUILD_TYPE=Release \
            -DSPIRV_DISASSEMBLY=ON \
            -DCMAKE_PREFIX_PATH="$(pwd)/third_party/spirv-tools/install"
          cmake --build build_release
      - name: Tests
        env:
          OCL_ICD_ENABLE_TRACE: 1
          OCL_ICD_FILENAMES: ${{ github.workspace }}/third_party/pocl/install/lib/libpocl.so
          OPENCL_LAYERS: ${{ github.workspace }}/build_release/libopencl-kernel-profiler.so
          TRACE_PROCESSOR_SHELL: ${{ github.workspace }}/third_party/perfetto/out/linux_clang_release/trace_processor_shell
        run: |
          PATH=$(pwd)/third_party/spirv-tools/install/bin:$PATH \
          LD_LIBRARY_PATH=$(pwd)/third_party/opencl-icd-loader/build:$LD_LIBRARY_PATH \
          $(pwd)/tests/test.sh "$(pwd)/build_release/tests/opencl-kernel-profiler-test"
